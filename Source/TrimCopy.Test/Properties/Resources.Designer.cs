//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TrimCopy.Test.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("TrimCopy.Test.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 		public async Task&lt;IEnumerable&lt;ProfileItem&gt;&gt; GetProfilesAsync(bool isLatest, TimeSpan timeout)
        ///		{
        ///			var interfacePacks = (await Netsh.GetInterfacesAsync().ConfigureAwait(false))
        ///				.ToArray(); // ToArray method is necessary.
        ///
        ///			var networkPacks = (await Netsh.GetNetworksAsync().ConfigureAwait(false))
        ///				.ToArray(); // ToArray method is necessary.
        ///
        ///			var profilePacks = await Netsh.GetProfilesAsync().ConfigureAwait(false);
        ///
        ///			return from profilePack in profilePacks
        ///				   let networkPack =  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string fixedIndentSizeInput1 {
            get {
                return ResourceManager.GetString("fixedIndentSizeInput1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to         public async Task&lt;IEnumerable&lt;ProfileItem&gt;&gt; GetProfilesAsync(bool isLatest, TimeSpan timeout)
        ///        {
        ///            var interfacePacks = (await Netsh.GetInterfacesAsync().ConfigureAwait(false))
        ///                .ToArray(); // ToArray method is necessary.
        ///
        ///            var networkPacks = (await Netsh.GetNetworksAsync().ConfigureAwait(false))
        ///                .ToArray(); // ToArray method is necessary.
        ///
        ///            var profilePacks = await Netsh.GetProfilesAsync().ConfigureAwait(false);
        ///
        ///       [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string fixedIndentSizeInput2 {
            get {
                return ResourceManager.GetString("fixedIndentSizeInput2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 		Public Shared Function CreateScheme(pointLow As Integer, pointHigh As Integer,
        ///											colorLow As Color, colorMid As Color, colorHigh As Color) As Color()
        ///
        ///			If ((pointLow &lt; 0) OrElse (100 &lt; pointLow)) Then Throw New ArgumentOutOfRangeException(&quot;pointLow&quot;)
        ///			If ((pointHigh &lt; 0) OrElse (100 &lt; pointHigh)) Then Throw New ArgumentOutOfRangeException(&quot;pointHigh&quot;)
        ///			If (pointLow &gt; pointHigh) Then Throw New ArgumentException(&quot;The low point must be lower than the high point.&quot;)
        ///
        ///			Dim pointMid As In [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string fixedIndentSizeInput3 {
            get {
                return ResourceManager.GetString("fixedIndentSizeInput3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to             public async Task&lt;IEnumerable&lt;ProfileItem&gt;&gt; GetProfilesAsync(bool isLatest, TimeSpan timeout)
        ///            {
        ///                var interfacePacks = (await Netsh.GetInterfacesAsync().ConfigureAwait(false))
        ///                    .ToArray(); // ToArray method is necessary.
        ///
        ///                var networkPacks = (await Netsh.GetNetworksAsync().ConfigureAwait(false))
        ///                    .ToArray(); // ToArray method is necessary.
        ///
        ///                var profilePacks = await Netsh.GetProfilesAsync().Conf [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string fixedIndentSizeOutput1 {
            get {
                return ResourceManager.GetString("fixedIndentSizeOutput1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   public async Task&lt;IEnumerable&lt;ProfileItem&gt;&gt; GetProfilesAsync(bool isLatest, TimeSpan timeout)
        ///  {
        ///      var interfacePacks = (await Netsh.GetInterfacesAsync().ConfigureAwait(false))
        ///          .ToArray(); // ToArray method is necessary.
        ///
        ///      var networkPacks = (await Netsh.GetNetworksAsync().ConfigureAwait(false))
        ///          .ToArray(); // ToArray method is necessary.
        ///
        ///      var profilePacks = await Netsh.GetProfilesAsync().ConfigureAwait(false);
        ///
        ///      return from profilePack in profilePacks
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string fixedIndentSizeOutput2 {
            get {
                return ResourceManager.GetString("fixedIndentSizeOutput2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to       Public Shared Function CreateScheme(pointLow As Integer, pointHigh As Integer,
        ///                                          colorLow As Color, colorMid As Color, colorHigh As Color) As Color()
        ///
        ///          If ((pointLow &lt; 0) OrElse (100 &lt; pointLow)) Then Throw New ArgumentOutOfRangeException(&quot;pointLow&quot;)
        ///          If ((pointHigh &lt; 0) OrElse (100 &lt; pointHigh)) Then Throw New ArgumentOutOfRangeException(&quot;pointHigh&quot;)
        ///          If (pointLow &gt; pointHigh) Then Throw New ArgumentException(&quot;The low point must  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string fixedIndentSizeOutput3 {
            get {
                return ResourceManager.GetString("fixedIndentSizeOutput3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 		/// &lt;summary&gt;
        ///		/// Get codec info from a BitmapImage.
        ///		/// &lt;/summary&gt;
        ///		/// &lt;typeparam name=&quot;TEncoder&quot;&gt;BitmapEncoder&lt;/typeparam&gt;
        ///		/// &lt;param name=&quot;source&quot;&gt;BitmapImage&lt;/param&gt;
        ///		/// &lt;returns&gt;Codec info&lt;/returns&gt;
        ///		public static BitmapCodecInfo GetCodecInfo&lt;TEncoder&gt;(this BitmapImage source) where TEncoder : BitmapEncoder, new()
        ///		{
        ///			if (source == null)
        ///				throw new ArgumentNullException(&quot;source&quot;);
        ///
        ///			using (var ms = new MemoryStream())
        ///			{
        ///				var encoder = new TEncoder();
        ///				encoder [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string htmlEncodeInput1 {
            get {
                return ResourceManager.GetString("htmlEncodeInput1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /// &amp;lt;summary&amp;gt;
        ////// Get codec info from a BitmapImage.
        ////// &amp;lt;/summary&amp;gt;
        ////// &amp;lt;typeparam name=&amp;quot;TEncoder&amp;quot;&amp;gt;BitmapEncoder&amp;lt;/typeparam&amp;gt;
        ////// &amp;lt;param name=&amp;quot;source&amp;quot;&amp;gt;BitmapImage&amp;lt;/param&amp;gt;
        ////// &amp;lt;returns&amp;gt;Codec info&amp;lt;/returns&amp;gt;
        ///public static BitmapCodecInfo GetCodecInfo&amp;lt;TEncoder&amp;gt;(this BitmapImage source) where TEncoder : BitmapEncoder, new()
        ///{
        ///    if (source == null)
        ///        throw new ArgumentNullException(&amp;quot;source&amp;quot;);
        ///
        ///    using (var ms = [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string htmlEncodeOutput1 {
            get {
                return ResourceManager.GetString("htmlEncodeOutput1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] newLineInputOutput {
            get {
                object obj = ResourceManager.GetObject("newLineInputOutput", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 				&lt;!-- Image list view --&gt;
        ///				&lt;ListView
        ///					x:Name=&quot;ImageListView&quot;
        ///					SelectionMode=&quot;Single&quot;
        ///					ItemsSource=&quot;{Binding FileListCoreView}&quot;
        ///					SelectedIndex=&quot;{Binding FileListCoreViewIndex, Mode=OneWay}&quot;&gt;
        ///					&lt;ListView.Resources&gt;
        ///						&lt;DataTemplate x:Key=&quot;RealizedThumbnail&quot;&gt;
        ///							&lt;Border Margin=&quot;4&quot;
        ///									Background=&quot;{Binding Status, Converter={StaticResource FileStatusToBrushConverterKey}}&quot;&gt;
        ///								&lt;Grid&gt;
        ///									&lt;Grid Background=&quot;{StaticResource FileItemStatus.Foreground}&quot;
        ///					 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string tabSizeInput1 {
            get {
                return ResourceManager.GetString("tabSizeInput1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 		/// &lt;summary&gt;
        ///		/// Blend two Colors.
        ///		/// &lt;/summary&gt;
        ///		/// &lt;param name=&quot;color1&quot;&gt;1st Color&lt;/param&gt;
        ///		/// &lt;param name=&quot;color2&quot;&gt;2nd Color&lt;/param&gt;
        ///		/// &lt;param name=&quot;color2Perc&quot;&gt;Percentage of 2nd Color&lt;/param&gt;
        ///		/// &lt;returns&gt;Blended Color&lt;/returns&gt;
        ///		/// &lt;remarks&gt;Alpha channels of both Colors will be ignored.&lt;/remarks&gt;
        ///		private static Color BlendColor(Color color1, Color color2, double color2Perc)
        ///		{
        ///			if ((color2Perc &lt; 0) || (100 &lt; color2Perc))
        ///				throw new ArgumentOutOfRangeException(nameof [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string tabSizeInput2 {
            get {
                return ResourceManager.GetString("tabSizeInput2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;!-- Image list view --&gt;
        ///&lt;ListView
        ///  x:Name=&quot;ImageListView&quot;
        ///  SelectionMode=&quot;Single&quot;
        ///  ItemsSource=&quot;{Binding FileListCoreView}&quot;
        ///  SelectedIndex=&quot;{Binding FileListCoreViewIndex, Mode=OneWay}&quot;&gt;
        ///  &lt;ListView.Resources&gt;
        ///    &lt;DataTemplate x:Key=&quot;RealizedThumbnail&quot;&gt;
        ///      &lt;Border Margin=&quot;4&quot;
        ///          Background=&quot;{Binding Status, Converter={StaticResource FileStatusToBrushConverterKey}}&quot;&gt;
        ///        &lt;Grid&gt;
        ///          &lt;Grid Background=&quot;{StaticResource FileItemStatus.Foreground}&quot;
        ///              Opacity=&quot;{Bindi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string tabSizeOutput1 {
            get {
                return ResourceManager.GetString("tabSizeOutput1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     /// &lt;summary&gt;
        ///    /// Blend two Colors.
        ///    /// &lt;/summary&gt;
        ///    /// &lt;param name=&quot;color1&quot;&gt;1st Color&lt;/param&gt;
        ///    /// &lt;param name=&quot;color2&quot;&gt;2nd Color&lt;/param&gt;
        ///    /// &lt;param name=&quot;color2Perc&quot;&gt;Percentage of 2nd Color&lt;/param&gt;
        ///    /// &lt;returns&gt;Blended Color&lt;/returns&gt;
        ///    /// &lt;remarks&gt;Alpha channels of both Colors will be ignored.&lt;/remarks&gt;
        ///    private static Color BlendColor(Color color1, Color color2, double color2Perc)
        ///    {
        ///            if ((color2Perc &lt; 0) || (100 &lt; color2Perc))
        ///                    [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string tabSizeOutput2 {
            get {
                return ResourceManager.GetString("tabSizeOutput2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 	/// &lt;summary&gt;
        ///	/// &lt;see cref=&quot;System.Threading.CancellationTokenSource&quot;/&gt; which can cancel without exception
        ///	/// &lt;/summary&gt;   
        ///	public sealed class CancellationTokenSourcePlus : CancellationTokenSource
        ///	{   
        ///		public CancellationTokenSourcePlus() : base() { }
        ///		public CancellationTokenSourcePlus(int millisecondsDelay) : base(millisecondsDelay) { }
        ///		public CancellationTokenSourcePlus(TimeSpan delay) : base(delay) { }
        ///		
        ///		private readonly object _locker = new object();
        ///		
        ///		public bool IsDispos [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string trailingSpacesInput1 {
            get {
                return ResourceManager.GetString("trailingSpacesInput1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /// &lt;summary&gt;
        ////// &lt;see cref=&quot;System.Threading.CancellationTokenSource&quot;/&gt; which can cancel without exception
        ////// &lt;/summary&gt;
        ///public sealed class CancellationTokenSourcePlus : CancellationTokenSource
        ///{
        ///    public CancellationTokenSourcePlus() : base() { }
        ///    public CancellationTokenSourcePlus(int millisecondsDelay) : base(millisecondsDelay) { }
        ///    public CancellationTokenSourcePlus(TimeSpan delay) : base(delay) { }
        ///
        ///    private readonly object _locker = new object();
        ///
        ///    public bool IsDisposed {  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string trailingSpacesOutput1 {
            get {
                return ResourceManager.GetString("trailingSpacesOutput1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     /// &lt;summary&gt;
        ///    /// &lt;see cref=&quot;System.Threading.CancellationTokenSource&quot;/&gt; which can cancel without exception
        ///    /// &lt;/summary&gt;   
        ///    public sealed class CancellationTokenSourcePlus : CancellationTokenSource
        ///    {   
        ///        public CancellationTokenSourcePlus() : base() { }
        ///        public CancellationTokenSourcePlus(int millisecondsDelay) : base(millisecondsDelay) { }
        ///        public CancellationTokenSourcePlus(TimeSpan delay) : base(delay) { }
        ///        
        ///        private readonly object _locke [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string trailingSpacesOutput2 {
            get {
                return ResourceManager.GetString("trailingSpacesOutput2", resourceCulture);
            }
        }
    }
}
